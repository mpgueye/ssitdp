#!/usr/bin/env ruby
# coding: utf-8
require 'optparse'
require 'ostruct'
require 'ssitdp'

# initialisation des options par défaut
options                = OpenStruct.new
options.nombre_threads = 100
options.file           = nil
options.url            = nil
options.type           = :rest
options.methode        = :get
options.output         = 'ssitdp_resultat.csv'

OptionParser.new do |opts|
  opts.banner = 'Usage: ssitdp [options]'

  # aide
  opts.on_tail('-h', '--help', 'Aide') do
    puts opts
    exit
  end

  # versions
  opts.on_tail('--version', 'Affiche la version') do
    puts Ssitdp::VERSION
    exit
  end

  # nombre de thread à lancer
  opts.on('-n', '--nombrethreads N', 'Nombre de threads') do |nt|
    options.nombre_threads = nt.to_i
  end

  # fichier CSV des paramètres
  opts.on('-f', '--file FILE', 'fichier CSV') do |file|
    options.file = file
  end

  # fichier CVS de sortie
  opts.on('-o', '--output OUTPUT', 'fichier CSV de sortie') do |output|
    options.output = output
  end

  # url à tester
  opts.on('--url URL', 'url a tester') do |url|
    options.url = url
  end

  # la méthode HTTP à utiliser
  opts.on('--method [METHOD]', [:get, :post], 'La méthode d\'appel HTTP (get ou post), get par défaut') do |methode|
    options.methode = methode
  end

  # le protocole
  opts.on('--type [TYPE]', [:rest], 'Type de test (rest), rest par défaut') do |t|
    options.type = t
  end
end.parse!

p options

if options.url.nil?
  puts 'l\'URL est obligatoire'
  exit
end

params = []

# recupération des paramètres si le fichier est spécifié
unless options.file.nil?
  if File.exist? options.file
    if options.file[-4..-1] == '.csv'
      i = 0
      tete = []
      CSV.foreach(options.file) do |row|
        i+=1
        if i == 1
          tete = row.clone
        else
          params << Hash[tete.zip row]
        end
      end
    else
      puts 'il faut donner un fihcier au format csv'
      exit
    end
  else
    puts 'le fichier spécifié n\'existe pas'
    exit
  end
end

# lancement du test de type :rest
if options.type == :rest
  test = Ssitdp::RestTest.new({
                                  nb_threads: options.nombre_threads,
                                  url: options.url,
                                  methode: options.methode,
                                  params: params
                              })
  resultats = test.run!
  resultats = [['thread', 'user CPU time', 'system CPU time', 'duree', 'code reponse']] + resultats
  CSV.open(options.output, 'w') do |csv|
    resultats.each{ |row| csv << row }
  end
  exit
end

# lancement du test de type :soap
if options.type == :soap
  puts 'ce module n\'est pas encore disponible'
  exit
end